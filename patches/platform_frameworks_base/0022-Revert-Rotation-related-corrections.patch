From 7a855c58de59ba4fda00b07e540296ebf74b29e1 Mon Sep 17 00:00:00 2001
From: Florian Esser <android-dev@fesr.de>
Date: Sat, 20 Apr 2019 04:08:12 +0200
Subject: [PATCH 22/23] Revert "Rotation related corrections"

This reverts commit 3da54b5c05f395296ec4d7fac8b4bedb0c3d5cf0.
---
 Android.bp                                         |  1 -
 .../com/android/internal/view/RotationPolicy.java  | 67 ++--------------------
 .../android/server/policy/PhoneWindowManager.java  | 25 ++++++--
 3 files changed, 25 insertions(+), 68 deletions(-)

diff --git a/Android.bp b/Android.bp
index 90ec5a1..3546365 100644
--- a/Android.bp
+++ b/Android.bp
@@ -669,7 +669,6 @@ java_library {
         "framework-protos",
         "android.hidl.base-V1.0-java",
         "android.hardware.cas-V1.0-java",
-        "android.hardware.configstore-V1.1-java",
         "android.hardware.contexthub-V1.0-java",
         "android.hardware.health-V1.0-java-constants",
         "android.hardware.thermal-V1.0-java-constants",
diff --git a/core/java/com/android/internal/view/RotationPolicy.java b/core/java/com/android/internal/view/RotationPolicy.java
index cc3ca3a..e9472fa 100644
--- a/core/java/com/android/internal/view/RotationPolicy.java
+++ b/core/java/com/android/internal/view/RotationPolicy.java
@@ -21,9 +21,6 @@ import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.database.ContentObserver;
 import android.graphics.Point;
-import android.hardware.configstore.V1_1.DisplayOrientation;
-import android.hardware.configstore.V1_1.ISurfaceFlingerConfigs;
-import android.hardware.configstore.V1_1.OptionalDisplayOrientation;
 import android.net.Uri;
 import android.os.AsyncTask;
 import android.os.Handler;
@@ -45,7 +42,7 @@ public final class RotationPolicy {
     private static final String TAG = "RotationPolicy";
     private static final int CURRENT_ROTATION = -1;
 
-    public static final int NATURAL_ROTATION = getNaturalRotation();
+    public static final int NATURAL_ROTATION = Surface.ROTATION_0;
 
     private RotationPolicy() {
     }
@@ -76,7 +73,7 @@ public final class RotationPolicy {
      * otherwise Configuration.ORIENTATION_UNDEFINED if any orientation is lockable.
      */
     public static int getRotationLockOrientation(Context context) {
-        if (!isCurrentRotationAllowed(context)) {
+        if (!areAllRotationsAllowed(context)) {
             final Point size = new Point();
             final IWindowManager wm = WindowManagerGlobal.getWindowManagerService();
             try {
@@ -112,8 +109,7 @@ public final class RotationPolicy {
      * Enables or disables rotation lock from the system UI toggle.
      */
     public static void setRotationLock(Context context, final boolean enabled) {
-        final int rotation = isCurrentRotationAllowed(context)
-                ? CURRENT_ROTATION : NATURAL_ROTATION;
+        final int rotation = areAllRotationsAllowed(context) ? CURRENT_ROTATION : NATURAL_ROTATION;
         setRotationLockAtAngle(context, enabled, rotation);
     }
 
@@ -142,40 +138,8 @@ public final class RotationPolicy {
         setRotationLock(enabled, NATURAL_ROTATION);
     }
 
-    public static boolean isRotationAllowed(int rotation,
-            int userRotationAngles, boolean allowAllRotations) {
-        if (userRotationAngles < 0) {
-            // Not set by user so use these defaults
-            userRotationAngles = allowAllRotations ?
-                    (1 | 2 | 4 | 8) : // All angles
-                    (1 | 2 | 8); // All except 180
-        }
-        switch (rotation) {
-            case Surface.ROTATION_0:
-                return (userRotationAngles & 1) != 0;
-            case Surface.ROTATION_90:
-                return (userRotationAngles & 2) != 0;
-            case Surface.ROTATION_180:
-                return (userRotationAngles & 4) != 0;
-            case Surface.ROTATION_270:
-                return (userRotationAngles & 8) != 0;
-        }
-        return false;
-    }
-
-    private static boolean isCurrentRotationAllowed(Context context) {
-        int userRotationAngles = Settings.System.getInt(context.getContentResolver(),
-                Settings.System.ACCELEROMETER_ROTATION_ANGLES, -1);
-        boolean allowAllRotations = context.getResources().getBoolean(
-                com.android.internal.R.bool.config_allowAllRotations);
-        final IWindowManager wm = WindowManagerGlobal.getWindowManagerService();
-        try {
-            return isRotationAllowed(wm.getDefaultDisplayRotation(), userRotationAngles,
-                    allowAllRotations);
-        } catch (RemoteException exc) {
-            Log.w(TAG, "Unable to getWindowManagerService.getDefaultDisplayRotation()");
-        }
-        return false;
+    private static boolean areAllRotationsAllowed(Context context) {
+        return context.getResources().getBoolean(R.bool.config_allowAllRotations);
     }
 
     private static void setRotationLock(final boolean enabled, final int rotation) {
@@ -226,27 +190,6 @@ public final class RotationPolicy {
         context.getContentResolver().unregisterContentObserver(listener.mObserver);
     }
 
-    public static int getNaturalRotation() {
-        OptionalDisplayOrientation orientation;
-
-        try {
-            orientation =
-                    ISurfaceFlingerConfigs.getService().primaryDisplayOrientation();
-            switch (orientation.value) {
-                case DisplayOrientation.ORIENTATION_90:
-                    return Surface.ROTATION_90;
-                case DisplayOrientation.ORIENTATION_180:
-                    return Surface.ROTATION_180;
-                case DisplayOrientation.ORIENTATION_270:
-                    return Surface.ROTATION_270;
-            }
-        } catch (RemoteException e) {
-            // do nothing
-        }
-
-        return Surface.ROTATION_0;
-    }
-
     /**
      * Listener that is invoked whenever a change occurs that might affect the rotation policy.
      */
diff --git a/services/core/java/com/android/server/policy/PhoneWindowManager.java b/services/core/java/com/android/server/policy/PhoneWindowManager.java
index b9ac284..32b3bc1 100644
--- a/services/core/java/com/android/server/policy/PhoneWindowManager.java
+++ b/services/core/java/com/android/server/policy/PhoneWindowManager.java
@@ -288,7 +288,6 @@ import com.android.internal.statusbar.IStatusBarService;
 import com.android.internal.util.ArrayUtils;
 import com.android.internal.util.ScreenshotHelper;
 import com.android.internal.util.ScreenShapeHelper;
-import com.android.internal.view.RotationPolicy;
 import com.android.internal.widget.PointerLocationView;
 import com.android.server.GestureLauncherService;
 import com.android.server.LocalServices;
@@ -8074,11 +8073,27 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     mAllowAllRotations = mContext.getResources().getBoolean(
                             com.android.internal.R.bool.config_allowAllRotations) ? 1 : 0;
                 }
+                // Rotation setting bitmask (1=0; 2=90; 4=180; 8=270)
                 boolean allowed = true;
-                if (orientation != ActivityInfo.SCREEN_ORIENTATION_FULL_SENSOR
-                        && orientation != ActivityInfo.SCREEN_ORIENTATION_FULL_USER) {
-                    allowed = RotationPolicy.isRotationAllowed(sensorRotation,
-                            mUserRotationAngles, mAllowAllRotations != 0);
+                if (mUserRotationAngles < 0) {
+                    // Not set by user so use these defaults
+                    mUserRotationAngles = mAllowAllRotations == 1 ?
+                            (1 | 2 | 4 | 8) : // All angles
+                                (1 | 2 | 8); // All except 180
+                }
+                switch (sensorRotation) {
+                    case Surface.ROTATION_0:
+                        allowed = (mUserRotationAngles & 1) != 0;
+                        break;
+                    case Surface.ROTATION_90:
+                        allowed = (mUserRotationAngles & 2) != 0;
+                        break;
+                    case Surface.ROTATION_180:
+                        allowed = (mUserRotationAngles & 4) != 0;
+                        break;
+                    case Surface.ROTATION_270:
+                        allowed = (mUserRotationAngles & 8) != 0;
+                        break;
                 }
                 if (allowed) {
                     preferredRotation = sensorRotation;
-- 
2.7.4

